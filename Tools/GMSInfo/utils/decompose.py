import sys
import json
import datetime


def generate_definitions(input_definitions_file, output_cpp_header_file):
    with open(input_definitions_file, "r") as source_definitions_file_handler:
        type_info_file_json = json.load(source_definitions_file_handler)

        with open(output_cpp_header_file, "w") as cpp_header_output_file:
            class_list = []
            used_keys_set = set()

            for typeId in type_info_file_json:
                if not type_info_file_json[typeId][0] in used_keys_set:
                    used_keys_set.add(type_info_file_json[typeId][0])
                    class_list.append("\t\t{}_{} = {}".format(
                        type_info_file_json[typeId][0],
                        type_info_file_json[typeId][1],
                        typeId))
                else:
                    for copy_index in range(1, 100):
                        if not "{}_{}".format(type_info_file_json[typeId][0], copy_index) in used_keys_set:
                            class_list.append("\t\t{}_{}_{} = {}".format(
                                type_info_file_json[typeId][0],
                                type_info_file_json[typeId][1],
                                copy_index,
                                typeId))
                            break

            cpp_header_output_file.write("// THIS IS AUTOGENERATED FILE! DO NOT EDIT!\n")
            cpp_header_output_file.write("// Generated by decompose.py at {}\n".format(datetime.datetime.now()))
            cpp_header_output_file.write("#ifndef __GLACIER_TYPE_IDS_H__\n")
            cpp_header_output_file.write("#define __GLACIER_TYPE_IDS_H__\n\n")
            cpp_header_output_file.write("namespace Glacier {\n")
            cpp_header_output_file.write("\tenum TypeId : unsigned int {\n")
            cpp_header_output_file.write(',\n'.join(class_list))
            cpp_header_output_file.write("\n\t};\n")
            cpp_header_output_file.write("}\n")
            cpp_header_output_file.write("#endif")
            cpp_header_output_file.close()

        source_definitions_file_handler.close()


if __name__ == "__main__":
    if len(sys.argv) < 3:
        print("""
            Usage:
                python decompose.py [typeids.json file path] [GlacierTypeInfo.h output location]
        """)
    else:
        generate_definitions(sys.argv[1], sys.argv[2])
